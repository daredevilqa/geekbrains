function numberToObject(num = "") {
  let result = {
    hundreds: "0",
    tens: "0",
    units: "0",
  };

  // If the number is single-digit
  if (num / 10 < 1) {
    result.units = num;
    return result;
  }

  // If the number is two-digit or more
  result.units = num[num.length - 1];
  result.tens = num[num.length - 2];

  // If the number is three-digit or more
  if (num / 100 >= 1) {
    let str = "";
    for (let i = num.length - 3; i >= 0; i--) {
      str += num[i];
    }
    result.hundreds = str.split("").reverse().join("");
  }

  return result;
}

//! Task 1
// Написать функцию, преобразующую число в объект. Передавая на вход число от 0 до infinity, надо получить на выходе объект, в котором в соответствующих свойствах описаны единицы, десятки и сотни. Например, для числа 245 надо получить следующий объект: {‘единицы’: 5, ‘десятки’: 4, ‘сотни’: 2}.

console.log("-------TASK 1-------");
console.log(numberToObject(prompt("Enter an integer from 0 to infinity")));

//! Task 2
// Продолжить работу с интернет-магазином:
// В прошлом домашнем задании вы реализовали корзину на базе массивов. Какими объектами можно заменить их элементы?
// Реализуйте такие объекты.
// Перенести функционал подсчета корзины на объектно-ориентированную базу.

// На дополнительный плюс - реализовать класс корзины. Свойство - сама корзина (массив). Методы - подсчет стоимости, добавление товара в корзину.

console.log("-------TASK 2-------");

//! Task 3
// Подумать над глобальными сущностями. К примеру, сущность «Продукт» в интернет-магазине актуальна не только для корзины, но и для каталога. Стремиться нужно к тому, чтобы объект «Продукт» имел единую структуру для различных модулей сайта, но в разных местах давал возможность вызывать разные методы.

console.log("-------TASK 3-------");
